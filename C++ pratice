chapter 5 
5.10:
编写一个使用嵌套循环的程序,要求用户输入一个值,指出要显示多少行。然后，程序将显示相应行数的星号,其中第一行包括一个星号，第二行包括两个星号，依此类推。每一行包含的字符数等于用户指定的行数，在星号不够的情况下，在星号前面加上句点。该程序的运行情况如下:
Enter number of rows :5
....*

...**

..***

.****

*****
///////////////////////////
answer:
#include <iostream>
using namespace std;

int main()
{
	int rows;
	cout << "enter rows: " << endl;
	cin >> rows;
	for (int i = 0; i < rows; i++)
	{
		int num1 = i + 1;
		int num2 = rows - (num1);
		for (int j = 0; j < num2; j++)
		{
			cout << ". ";
		}
		for (int z = 0; z < num1; z++)
		{
			cout << "* " ;
		}
		cout << endl;
		
	}
	
}

chapter 6
6.2
编写一个程序，最多将10个donation值读入到一个double数组中（如果您愿意，也可使用模板类array)。程序遇到非数字输入时将结束输入，并报告这些数字的平均值以及数组中有多少个数字大于平均值。
answer:
int main(void)
{
	double donations[10];
	int count = 0;
	double sum = 0;
	for (int i = 0; i < 10; i++)
	{
		cout << "Enter numbers:";
		cin >> donations[i];
		if (isalpha(donations[i]))
		{
			break;
		}
		sum += donations[i];
		count += 1;
		
	
	}

	double average = sum / count;
	double size = sizeof(donations) / sizeof(donations[0]);
	int count2 = 0;
	for (int i = 0; i < size; i++)
	{
		if (donations[i] > average)
		{
			count2 += 1;
		}

	}

	cout << "Average number is:" << average <<
		"and " << count2 << "numbers larger than average." << endl;
}

6.6
编写一个程序，记录捐助给“维护合法权利团体”的资金。该程序要求用户输入捐献者数目，然后要求用户输入每一个捐献者的姓名和款项。
这些信息被储存在一个动态分配的结构数组中。每个结构有两个成员:用来储存姓名的字符数组（或string对象）和用来存储款项的double成员。
读取所有的数据后，程序将显示所有捐款超过10000的捐款者的姓名及其捐款数额。
该列表前应包含一个标题，指出下面的捐款者是重要捐款人(Grand Patrons)。然后，程序将列出其他的捐款者，该列表要以Patrons开头。
如果某种类别没有捐款者，则程序将打印单词“none”。该程序只显示这两种类别，而不进行排序。
answer:
struct donation {
	string name;
	double money;
};

void Grandpatrons(donation* ptr, int number)
{

	for (int i = 0; i < number; i++) {
		if (ptr[i].money > 10000) {
			cout << "Grand Patrons!\n";
			cout << "Name: " << ptr[i].name << "\t" <<
				"Money" << ptr[i].money << endl;
		}
		else {
			cout << "Patrons.\n";
			cout << "Name: " << ptr[i].name << "Money" << ptr[i].money << endl;
		}

	}

}


int main()
{
	int number;
	cout << "Enter number: \n";
	cin >> number;
	cin.get();
	donation* ptr = new donation[number];

	for (int i = 0; i < number; i++) {
		cout << "Print No." << i + 1 << " member name.\n";
		getline(cin, ptr[i].name);
		cout << "Print No." << i + 1 << " member money.\n";
		cin >> ptr[i].money;
		cin.get();
	}

	cout << "Complete input.\n";

	Grandpatrons(ptr, number);
	return 0;
}



